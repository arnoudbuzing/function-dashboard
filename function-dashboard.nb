(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    276162,       5369]
NotebookOptionsPosition[    275262,       5346]
NotebookOutlinePosition[    275655,       5362]
CellTagsIndexPosition[    275612,       5359]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData["Quit"], "Input",
 CellChangeTimes->{{3.9234083896978397`*^9, 3.923408390229*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"147229e2-15d3-431f-9a0d-9bc9e08cf09e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PythonPackageFunctions", "[", "package_String", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"session", ",", "file", ",", "obj", ",", "result"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"session", "=", 
      InterpretationBox[
       DynamicModuleBox[{Typeset`open = False}, 
        TemplateBox[{"Expression", 
          RowBox[{"StartExternalSession", "[", 
            DynamicBox[
             FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], 
            "]"}], 
          GridBox[{{
             RowBox[{
               TagBox["\"Byte count: \"", "IconizedLabel"], 
               "\[InvisibleSpace]", 
               TagBox["864", "IconizedItem"]}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          Dynamic[Typeset`open]},
         "IconizedObject"]],
       StartExternalSession[{
        "Python", 
         "Evaluator" -> <|
          "Dependencies" -> {$CellContext`package}, "EnvironmentName" -> 
           "wolfram-" <> $CellContext`package|>, 
         "SessionProlog" -> {"import " <> $CellContext`package}}],
       SelectWithContents->True,
       Selectable->False]}], ";", "\[IndentingNewLine]", 
     RowBox[{"file", "=", 
      RowBox[{"File", "[", 
       InterpretationBox[
        DynamicModuleBox[{Typeset`open = False}, 
         TemplateBox[{"Expression", 
           RowBox[{"FileNameJoin", "[", 
             DynamicBox[
              FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], 
             "]"}], 
           GridBox[{{
              RowBox[{
                TagBox["\"Byte count: \"", "IconizedLabel"], 
                "\[InvisibleSpace]", 
                TagBox["192", "IconizedItem"]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           Dynamic[Typeset`open]},
          "IconizedObject"]],
        FileNameJoin[{
          NotebookDirectory[], "function-dashboard.py"}],
        SelectWithContents->True,
        Selectable->False], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ExternalEvaluate", "[", 
      RowBox[{"session", ",", "file"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"obj", "=", 
      RowBox[{"ExternalEvaluate", "[", 
       RowBox[{"session", ",", 
        RowBox[{"\"\<function_dashboard\>\"", "->", "package"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"result", "=", 
      RowBox[{"ExternalEvaluate", "[", 
       RowBox[{"session", ",", 
        RowBox[{"\"\<lambda obj: obj.get_package_info()\>\"", "->", "obj"}]}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"DeleteObject", "[", "session", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Dataset", "[", "result", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.923394357653367*^9, 3.9233944100244102`*^9}, {
   3.923394445455296*^9, 3.9233944531612473`*^9}, {3.923407121374486*^9, 
   3.923407206714221*^9}, 3.9234072382935867`*^9, {3.923408231259301*^9, 
   3.9234082731074266`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"05f91d20-68b2-4f05-9138-8eab74acde40"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PythonPackageFunctions", "[", "\"\<hypernetx\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.923407220331461*^9, 3.923407223910718*^9}, {
  3.923408293055826*^9, 3.923408294368412*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"3f20b253-9edb-424a-b3c7-c152f8202e11"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "hypernetx" -> {<|
         "hypernetx.algorithms" -> {<|
            "hypernetx.algorithms.contagion" -> {}, 
             "classes" -> {"Counter", "_ListDict_", "defaultdict"}, 
             "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5237375840], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "H", "tau", "gamma", "transmission_function", 
                    "initial_infecteds", "initial_recovereds", "rho", "tmin", 
                    "tmax"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.contagion", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5237376000], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "H", "tau", "gamma", "transmission_function", 
                    "initial_infecteds", "rho", "tmin", "tmax", 
                    "return_full_data", "sim_kwargs"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.contagion", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236816000], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"node", "status", "edge"}, "IsModule" -> 
                  False, "Module" -> "hypernetx.algorithms.contagion", 
                  "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236815840], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "fig", "H", "transition_events", "node_state_color_dict", 
                    "edge_state_color_dict", "node_radius", "fps"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.contagion", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236816640], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "H", "tau", "gamma", "transmission_function", 
                    "initial_infecteds", "initial_recovereds", "rho", "tmin", 
                    "tmax", "dt", "return_full_data"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.contagion", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5237375680], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "H", "tau", "gamma", "transmission_function", 
                    "initial_infecteds", "rho", "tmin", "tmax", "dt", 
                    "return_full_data"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.contagion", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236816160], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"node", "status", "edge"}, "IsModule" -> 
                  False, "Module" -> "hypernetx.algorithms.contagion", 
                  "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236816480], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"node", "status", "edge"}, "IsModule" -> 
                  False, "Module" -> "hypernetx.algorithms.contagion", 
                  "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236816320], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"node", "status", "edge", "tau"}, "IsModule" -> 
                  False, "Module" -> "hypernetx.algorithms.contagion", 
                  "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]]}|>, <|
            "hypernetx.algorithms.generative_models" -> {}, 
             "classes" -> {"Hypergraph", "defaultdict"}, "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 6082487424], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"k1", "k2"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.generative_models", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 6082487264], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"k1", "k2", "g1", "g2", "omega"}, "IsModule" -> 
                  False, "Module" -> "hypernetx.algorithms.generative_models",
                   "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5515329216], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"n", "m", "p", "node_labels", "edge_labels"},
                   "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.generative_models", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]]}|>, <|
            "hypernetx.algorithms.homology_mod2" -> {}, 
             "classes" -> {"HyperNetXError", "csr_matrix", "defaultdict"}, 
             "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236812640], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"i", "j", "M", "R"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236812480], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"i", "j", "M", "L"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236813440], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"bd"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236810240], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"i", "j", "S"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236813600], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"max_dim", "k"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236812800], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"M", "s1", "s2"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236810080], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"i", "j", "S"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236812320], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"i", "j", "M", "R"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236812160], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"i", "j", "M", "L"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236811360], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"M", "i", "j"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236811200], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"M", "i", "j"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236813920], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"bd", "k"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236814080], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"h", "k"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236809920], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"km1basis", "kbasis"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236813280], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"image_basis"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236813760], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"h", "k"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236814240], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"bd", "k", "boundary"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236814400], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"h", "k", "shortest", "interpreted"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236814560], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"Ck", "arr", "labels"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236809760], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"h", "k"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236811520], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"ar1", "ar2"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236812000], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"mat1", "mat2"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236811680], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"mat1", "mat2"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236811840], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"arr", "reverse"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236813120], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"M"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236812960], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"M"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236811040], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"i", "j"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236810880], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"i", "j"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]]}|>, <|
            "hypernetx.algorithms.hypergraph_modularity" -> {}, 
             "classes" -> {"Counter"}, "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 6082489024], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "A", "wdc", "delta", "verbose"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 6082488864], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "A", "wdc", "delta", "verbose"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 6082488384], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "A"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 6082487104], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"D"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 6082488704], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"HG", "delta", "verbose"}, "IsModule" -> 
                  False, "Module" -> 
                  "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 6082489184], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"HG", "A", "wdc", "delta", "verbose"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 6082487744], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"d", "c"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 6082487904], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"d", "c"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 6082488224], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"HG", "A", "wdc"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.hypergraph_modularity", 
                  "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 6082487584], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"A"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 6082488064], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"d", "c"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 6082488544], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"HG"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]]}|>, <|
            "hypernetx.algorithms.laplacians_clustering" -> {}, 
             "classes" -> {"HyperNetXError", "KMeans", "csr_matrix"}, 
             "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 4976785056], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "diagonals", "offsets", "shape", "format", "dtype"}, 
                  "IsModule" -> False, "Module" -> "scipy.sparse._construct", 
                  "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5032792832], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "A", "k", "M", "sigma", "which", "v0", "ncv", "maxiter", 
                    "tol", "return_eigenvectors", "Minv", "OPinv", "OPpart"}, 
                  "IsModule" -> False, "Module" -> 
                  "scipy.sparse.linalg._eigen.arpack.arpack", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5237376640], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"P"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.laplacians_clustering", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 4976785216], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"n", "dtype", "format"}, "IsModule" -> False,
                   "Module" -> "scipy.sparse._construct", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5237378880], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "weights", "index"}, "IsModule" -> 
                  False, "Module" -> 
                  "hypernetx.algorithms.laplacians_clustering", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5237376160], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "weights", "index", "check_connected"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.laplacians_clustering", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5515075776], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "k", "existing_lap", "weights"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.laplacians_clustering", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]]}|>, <|
            "hypernetx.algorithms.s_centrality_measures" -> {}, 
             "classes" -> {"partial"}, "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236814720], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "func", "H", "s", "edges", "f", "return_singletons"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.s_centrality_measures", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236814880], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "H", "s", "edges", "normalized", "return_singletons"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.s_centrality_measures", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236815040], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "H", "s", "edges", "return_singletons", "source"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.s_centrality_measures", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236815520], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "H", "s", "edges", "source", "return_singletons"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.s_centrality_measures", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236815360], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "H", "s", "edges", "source", "normalized", 
                    "return_singletons"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.algorithms.s_centrality_measures", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236815200], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "s", "edge"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.algorithms.s_centrality_measures", 
                  "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]]}|>}, "classes" -> {}, 
          "functions" -> {
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5237375840], 
               "Call" -> False|>, <|
              "Arguments" -> {
                "H", "tau", "gamma", "transmission_function", 
                 "initial_infecteds", "initial_recovereds", "rho", "tmin", 
                 "tmax"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.contagion", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5237376000], 
               "Call" -> False|>, <|
              "Arguments" -> {
                "H", "tau", "gamma", "transmission_function", 
                 "initial_infecteds", "rho", "tmin", "tmax", 
                 "return_full_data", "sim_kwargs"}, "IsModule" -> False, 
               "Module" -> "hypernetx.algorithms.contagion", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236811360], 
               "Call" -> False|>, <|
              "Arguments" -> {"M", "i", "j"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236811200], 
               "Call" -> False|>, <|
              "Arguments" -> {"M", "i", "j"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236813920], 
               "Call" -> False|>, <|
              "Arguments" -> {"bd", "k"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236814080], 
               "Call" -> False|>, <|
              "Arguments" -> {"h", "k"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236809920], 
               "Call" -> False|>, <|
              "Arguments" -> {"km1basis", "kbasis"}, "IsModule" -> False, 
               "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236813280], 
               "Call" -> False|>, <|
              "Arguments" -> {"image_basis"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236813760], 
               "Call" -> False|>, <|
              "Arguments" -> {"h", "k"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 6082487424], 
               "Call" -> False|>, <|
              "Arguments" -> {"k1", "k2"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.generative_models", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236816000], 
               "Call" -> False|>, <|
              "Arguments" -> {"node", "status", "edge"}, "IsModule" -> False, 
               "Module" -> "hypernetx.algorithms.contagion", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236815840], 
               "Call" -> False|>, <|
              "Arguments" -> {
                "fig", "H", "transition_events", "node_state_color_dict", 
                 "edge_state_color_dict", "node_radius", "fps"}, "IsModule" -> 
               False, "Module" -> "hypernetx.algorithms.contagion", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 6082487264], 
               "Call" -> False|>, <|
              "Arguments" -> {"k1", "k2", "g1", "g2", "omega"}, "IsModule" -> 
               False, "Module" -> "hypernetx.algorithms.generative_models", 
               "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> False, 
               "IsCallable" -> True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 6082487104], 
               "Call" -> False|>, <|
              "Arguments" -> {"D"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236816640], 
               "Call" -> False|>, <|
              "Arguments" -> {
                "H", "tau", "gamma", "transmission_function", 
                 "initial_infecteds", "initial_recovereds", "rho", "tmin", 
                 "tmax", "dt", "return_full_data"}, "IsModule" -> False, 
               "Module" -> "hypernetx.algorithms.contagion", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5237375680], 
               "Call" -> False|>, <|
              "Arguments" -> {
                "H", "tau", "gamma", "transmission_function", 
                 "initial_infecteds", "rho", "tmin", "tmax", "dt", 
                 "return_full_data"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.contagion", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5515329216], 
               "Call" -> False|>, <|
              "Arguments" -> {"n", "m", "p", "node_labels", "edge_labels"}, 
               "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.generative_models", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5237376640], 
               "Call" -> False|>, <|
              "Arguments" -> {"P"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.laplacians_clustering", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236814240], 
               "Call" -> False|>, <|
              "Arguments" -> {"bd", "k", "boundary"}, "IsModule" -> False, 
               "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236814400], 
               "Call" -> False|>, <|
              "Arguments" -> {"h", "k", "shortest", "interpreted"}, 
               "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236816160], 
               "Call" -> False|>, <|
              "Arguments" -> {"node", "status", "edge"}, "IsModule" -> False, 
               "Module" -> "hypernetx.algorithms.contagion", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236814560], 
               "Call" -> False|>, <|
              "Arguments" -> {"Ck", "arr", "labels"}, "IsModule" -> False, 
               "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236809760], 
               "Call" -> False|>, <|
              "Arguments" -> {"h", "k"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 6082488704], 
               "Call" -> False|>, <|
              "Arguments" -> {"HG", "delta", "verbose"}, "IsModule" -> False, 
               "Module" -> "hypernetx.algorithms.hypergraph_modularity", 
               "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> False, 
               "IsCallable" -> True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 6082489184], 
               "Call" -> False|>, <|
              "Arguments" -> {"HG", "A", "wdc", "delta", "verbose"}, 
               "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 6082487744], 
               "Call" -> False|>, <|
              "Arguments" -> {"d", "c"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236811520], 
               "Call" -> False|>, <|
              "Arguments" -> {"ar1", "ar2"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236812000], 
               "Call" -> False|>, <|
              "Arguments" -> {"mat1", "mat2"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236811680], 
               "Call" -> False|>, <|
              "Arguments" -> {"mat1", "mat2"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 6082487904], 
               "Call" -> False|>, <|
              "Arguments" -> {"d", "c"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236816480], 
               "Call" -> False|>, <|
              "Arguments" -> {"node", "status", "edge"}, "IsModule" -> False, 
               "Module" -> "hypernetx.algorithms.contagion", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236811840], 
               "Call" -> False|>, <|
              "Arguments" -> {"arr", "reverse"}, "IsModule" -> False, 
               "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 6082488224], 
               "Call" -> False|>, <|
              "Arguments" -> {"HG", "A", "wdc"}, "IsModule" -> False, 
               "Module" -> "hypernetx.algorithms.hypergraph_modularity", 
               "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> False, 
               "IsCallable" -> True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5237378880], 
               "Call" -> False|>, <|
              "Arguments" -> {"H", "weights", "index"}, "IsModule" -> False, 
               "Module" -> "hypernetx.algorithms.laplacians_clustering", 
               "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> False, 
               "IsCallable" -> True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 6082487584], 
               "Call" -> False|>, <|
              "Arguments" -> {"A"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5237376160], 
               "Call" -> False|>, <|
              "Arguments" -> {"H", "weights", "index", "check_connected"}, 
               "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.laplacians_clustering", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236813120], 
               "Call" -> False|>, <|
              "Arguments" -> {"M"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236814880], 
               "Call" -> False|>, <|
              "Arguments" -> {
                "H", "s", "edges", "normalized", "return_singletons"}, 
               "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.s_centrality_measures", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236815040], 
               "Call" -> False|>, <|
              "Arguments" -> {
                "H", "s", "edges", "return_singletons", "source"}, "IsModule" -> 
               False, "Module" -> 
               "hypernetx.algorithms.s_centrality_measures", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236815520], 
               "Call" -> False|>, <|
              "Arguments" -> {
                "H", "s", "edges", "source", "return_singletons"}, "IsModule" -> 
               False, "Module" -> 
               "hypernetx.algorithms.s_centrality_measures", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236815360], 
               "Call" -> False|>, <|
              "Arguments" -> {
                "H", "s", "edges", "source", "normalized", 
                 "return_singletons"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.s_centrality_measures", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236815200], 
               "Call" -> False|>, <|
              "Arguments" -> {"H", "s", "edge"}, "IsModule" -> False, 
               "Module" -> "hypernetx.algorithms.s_centrality_measures", 
               "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> False, 
               "IsCallable" -> True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236812960], 
               "Call" -> False|>, <|
              "Arguments" -> {"M"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5515075776], 
               "Call" -> False|>, <|
              "Arguments" -> {"H", "k", "existing_lap", "weights"}, 
               "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.laplacians_clustering", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 6082488064], 
               "Call" -> False|>, <|
              "Arguments" -> {"d", "c"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236811040], 
               "Call" -> False|>, <|
              "Arguments" -> {"i", "j"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236810880], 
               "Call" -> False|>, <|
              "Arguments" -> {"i", "j"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236816320], 
               "Call" -> False|>, <|
              "Arguments" -> {"node", "status", "edge", "tau"}, "IsModule" -> 
               False, "Module" -> "hypernetx.algorithms.contagion", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 6082488544], 
               "Call" -> False|>, <|
              "Arguments" -> {"HG"}, "IsModule" -> False, "Module" -> 
               "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]]}|>, <|
         "hypernetx.classes" -> {<|
            "hypernetx.classes.entityset" -> {}, 
             "classes" -> {
              "Any", "AttrList", "EntitySet", "Hashable", "Iterable", 
               "Mapping", "OrderedDict", "Sequence", "TypeVar", 
               "defaultdict"}, "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033057536], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"df", "weights", "weight_col"}, "IsModule" -> 
                  False, "Module" -> "hypernetx.classes.helpers", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 4371316800], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"entity", "data_cols"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.classes.entityset", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 4353816544], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"node_or_string"}, "IsModule" -> False, 
                  "Module" -> "ast", "IsClass" -> False, "IsFunction" -> True,
                   "IsMethod" -> False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033057856], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "df", "data_cols", "weights", "weight_col", "aggregateby"},
                   "IsModule" -> False, "Module" -> 
                  "hypernetx.classes.helpers", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033064256], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"func"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.utils.decorators", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]]}|>, <|
            "hypernetx.classes.helpers" -> {}, 
             "classes" -> {
              "Any", "AttrList", "CategoricalDtype", "Hashable", "Iterable", 
               "Mapping", "OrderedDict", "Sequence", "TypeVar", "UserList", 
               "defaultdict"}, "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033057536], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"df", "weights", "weight_col"}, "IsModule" -> 
                  False, "Module" -> "hypernetx.classes.helpers", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033058336], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"data"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.classes.helpers", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033057696], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"props", "index_cols", "misc_col"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.classes.helpers", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033058176], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"dic", "level"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.classes.helpers", "IsClass" -> False,
                   "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033056736], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"data"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.classes.helpers", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 4353816544], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"node_or_string"}, "IsModule" -> False, 
                  "Module" -> "ast", "IsClass" -> False, "IsFunction" -> True,
                   "IsMethod" -> False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033058016], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"a", "b", "path"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.classes.helpers", "IsClass" -> False,
                   "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033057856], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "df", "data_cols", "weights", "weight_col", "aggregateby"},
                   "IsModule" -> False, "Module" -> 
                  "hypernetx.classes.helpers", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033058496], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"data"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.classes.helpers", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]]}|>, <|
            "hypernetx.classes.hypergraph" -> {}, 
             "classes" -> {
              "Any", "EntitySet", "HyperNetXError", "Hypergraph", "Iterable", 
               "Sequence", "TypeVar", "coo_matrix", "csr_matrix", 
               "defaultdict"}, "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 4359531520], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"x", "memo", "_nil"}, "IsModule" -> False, 
                  "Module" -> "copy", "IsClass" -> False, "IsFunction" -> 
                  True, "IsMethod" -> False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033058176], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"dic", "level"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.classes.helpers", "IsClass" -> False,
                   "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033058016], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"a", "b", "path"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.classes.helpers", "IsClass" -> False,
                   "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033052096], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"func"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.utils.decorators", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]]}|>}, "classes" -> {"EntitySet", "Hypergraph"}, 
          "functions" -> {}|>, <|
         "hypernetx.drawing" -> {<|
            "hypernetx.drawing.rubber_band" -> {}, 
             "classes" -> {"ConvexHull", "Hypergraph", "PolyCollection"}, 
             "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236808960], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "H", "pos", "with_color", "with_node_counts", 
                    "with_edge_counts", "layout", "layout_kwargs", "ax", 
                    "node_radius", "edges_kwargs", "nodes_kwargs", 
                    "edge_labels_on_edge", "edge_labels", 
                    "edge_labels_kwargs", "node_labels", "node_labels_kwargs",
                     "with_edge_labels", "with_node_labels", 
                    "node_label_alpha", "edge_label_alpha", 
                    "with_additional_edges", "additional_edges_kwargs", 
                    "return_pos"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.drawing.rubber_band", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096225696], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "H", "pos", "polys", "labels", "edge_labels_on_edge", 
                    "ax"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.drawing.rubber_band", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096448992], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "pos", "ax", "node_radius", "dr"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.drawing.rubber_band", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236808800], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "pos", "node_radius", "ax", "labels"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.drawing.rubber_band", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236808640], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "pos", "node_radius", "r0", "ax"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.drawing.rubber_band", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096224896], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"v"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.drawing.util", "IsClass" -> False, "IsFunction" -> 
                  True, "IsMethod" -> False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096224256], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "pos"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.drawing.rubber_band", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096225056], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"S", "count", "override"}, "IsModule" -> 
                  False, "Module" -> "hypernetx.drawing.util", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096225376], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "collapse"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.drawing.util", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096224576], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"items", "kwargs"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.drawing.util", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096225536], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "pos", "node_radius", "dr"}, "IsModule" -> 
                  False, "Module" -> "hypernetx.drawing.rubber_band", 
                  "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096224096], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "G", "layout"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.drawing.rubber_band", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236700032], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"X", "metric"}, "IsModule" -> False, 
                  "Module" -> "scipy.spatial.distance", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096224736], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"inflated"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.drawing.util", "IsClass" -> False, "IsFunction" -> 
                  True, "IsMethod" -> False, "IsCallable" -> True|>]]}|>, <|
            "hypernetx.drawing.two_column" -> {}, 
             "classes" -> {"LineCollection"}, "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236809600], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "H", "with_node_labels", "with_edge_labels", 
                    "with_node_counts", "with_edge_counts", "with_color", 
                    "edge_kwargs", "ax"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.drawing.two_column", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236809280], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "pos", "ax"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.drawing.two_column", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236809440], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "H", "pos", "labels", "with_node_labels", 
                    "with_edge_labels", "ax"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.drawing.two_column", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096225056], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"S", "count", "override"}, "IsModule" -> 
                  False, "Module" -> "hypernetx.drawing.util", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5236809120], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "spacing"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.drawing.two_column", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]]}|>, <|
            "hypernetx.drawing.util" -> {}, "classes" -> {"combinations"}, 
             "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096224896], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"v"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.drawing.util", "IsClass" -> False, "IsFunction" -> 
                  True, "IsMethod" -> False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096225056], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"S", "count", "override"}, "IsModule" -> 
                  False, "Module" -> "hypernetx.drawing.util", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096225216], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "collapse"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.drawing.util", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096225376], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "collapse"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.drawing.util", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096224416], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"items", "v"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.drawing.util", "IsClass" -> False, "IsFunction" -> 
                  True, "IsMethod" -> False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096224576], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"items", "kwargs"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.drawing.util", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096224736], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"inflated"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.drawing.util", "IsClass" -> False, "IsFunction" -> 
                  True, "IsMethod" -> False, "IsCallable" -> True|>]]}|>}, 
          "classes" -> {}, "functions" -> {
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236808960], 
               "Call" -> False|>, <|
              "Arguments" -> {
                "H", "pos", "with_color", "with_node_counts", 
                 "with_edge_counts", "layout", "layout_kwargs", "ax", 
                 "node_radius", "edges_kwargs", "nodes_kwargs", 
                 "edge_labels_on_edge", "edge_labels", "edge_labels_kwargs", 
                 "node_labels", "node_labels_kwargs", "with_edge_labels", 
                 "with_node_labels", "node_label_alpha", "edge_label_alpha", 
                 "with_additional_edges", "additional_edges_kwargs", 
                 "return_pos"}, "IsModule" -> False, "Module" -> 
               "hypernetx.drawing.rubber_band", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5236809600], 
               "Call" -> False|>, <|
              "Arguments" -> {
                "H", "with_node_labels", "with_edge_labels", 
                 "with_node_counts", "with_edge_counts", "with_color", 
                 "edge_kwargs", "ax"}, "IsModule" -> False, "Module" -> 
               "hypernetx.drawing.two_column", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]]}|>, <|
         "hypernetx.exception" -> {}, 
          "classes" -> {
           "HyperNetXError", "HyperNetXException", 
            "HyperNetXNotImplementedError"}, "functions" -> {}|>, <|
         "hypernetx.read_write" -> {}, "classes" -> {}, "functions" -> {
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 4371007264], 
               "Call" -> False|>, <|
              "Arguments" -> {"filepath"}, "IsModule" -> False, "Module" -> 
               "hypernetx.read_write", "IsClass" -> False, "IsFunction" -> 
               True, "IsMethod" -> False, "IsCallable" -> True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 4371007104], 
               "Call" -> False|>, <|
              "Arguments" -> {"obj", "filename"}, "IsModule" -> False, 
               "Module" -> "hypernetx.read_write", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]]}|>, <|
         "hypernetx.reports" -> {<|
            "hypernetx.reports.descriptive_stats" -> {}, 
             "classes" -> {"Counter"}, "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096209632], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"X"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096222496], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "aggregated"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.reports.descriptive_stats", 
                  "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096222336], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "aggregated"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.reports.descriptive_stats", 
                  "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096223936], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096222176], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "aggregated"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.reports.descriptive_stats", 
                  "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096222976], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "node", "edge"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.reports.descriptive_stats", 
                  "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096223776], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "node", "edge"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.reports.descriptive_stats", 
                  "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033061536], "Call" -> 
                  False|>, <|
                 "Arguments" -> {}, "IsModule" -> False, "Module" -> 
                  "hypernetx.utils.decorators", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096222656], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "H", "s", "aggregated", "edges", "return_singletons"}, 
                  "IsModule" -> False, "Module" -> 
                  "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096223456], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096223296], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096223616], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"H", "aggregated"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.reports.descriptive_stats", 
                  "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]]}|>}, "classes" -> {}, 
          "functions" -> {
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5096209632], 
               "Call" -> False|>, <|
              "Arguments" -> {"X"}, "IsModule" -> False, "Module" -> 
               "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5096222496], 
               "Call" -> False|>, <|
              "Arguments" -> {"H", "aggregated"}, "IsModule" -> False, 
               "Module" -> "hypernetx.reports.descriptive_stats", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5096222336], 
               "Call" -> False|>, <|
              "Arguments" -> {"H", "aggregated"}, "IsModule" -> False, 
               "Module" -> "hypernetx.reports.descriptive_stats", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5096223936], 
               "Call" -> False|>, <|
              "Arguments" -> {"H"}, "IsModule" -> False, "Module" -> 
               "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5096222176], 
               "Call" -> False|>, <|
              "Arguments" -> {"H", "aggregated"}, "IsModule" -> False, 
               "Module" -> "hypernetx.reports.descriptive_stats", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5096222976], 
               "Call" -> False|>, <|
              "Arguments" -> {"H", "node", "edge"}, "IsModule" -> False, 
               "Module" -> "hypernetx.reports.descriptive_stats", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5096223776], 
               "Call" -> False|>, <|
              "Arguments" -> {"H", "node", "edge"}, "IsModule" -> False, 
               "Module" -> "hypernetx.reports.descriptive_stats", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5096222656], 
               "Call" -> False|>, <|
              "Arguments" -> {
                "H", "s", "aggregated", "edges", "return_singletons"}, 
               "IsModule" -> False, "Module" -> 
               "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5096223456], 
               "Call" -> False|>, <|
              "Arguments" -> {"H"}, "IsModule" -> False, "Module" -> 
               "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5096223296], 
               "Call" -> False|>, <|
              "Arguments" -> {"H"}, "IsModule" -> False, "Module" -> 
               "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5096223616], 
               "Call" -> False|>, <|
              "Arguments" -> {"H", "aggregated"}, "IsModule" -> False, 
               "Module" -> "hypernetx.reports.descriptive_stats", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]]}|>, <|
         "hypernetx.utils" -> {<|
            "hypernetx.utils.decorators" -> {}, "classes" -> {}, "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033063136], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"caller", "_func", "kwsyntax"}, "IsModule" -> 
                  False, "Module" -> "decorator", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033061536], "Call" -> 
                  False|>, <|
                 "Arguments" -> {}, "IsModule" -> False, "Module" -> 
                  "hypernetx.utils.decorators", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033052096], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"func"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.utils.decorators", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033064256], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"func"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.utils.decorators", "IsClass" -> False, 
                  "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                  True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 4352843488], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"wrapped", "assigned", "updated"}, 
                  "IsModule" -> False, "Module" -> "functools", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]]}|>, <|
            "hypernetx.utils.extras" -> {}, 
             "classes" -> {
              "Callable", "DefaultOrderedDict", "HNXCount", "HyperNetXError", 
               "OrderedDict", "defaultdict"}, "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033061216], "Call" -> 
                  False|>, <|
                 "Arguments" -> {
                   "num_edges", "num_nodes", "edgeprefix", "nodeprefix", 
                    "edgelabel", "nodelabel"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.utils.extras", "IsClass" -> False, "IsFunction" -> 
                  True, "IsMethod" -> False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033059456], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"data", "weights", "aggregateby"}, 
                  "IsModule" -> False, "Module" -> "hypernetx.utils.extras", 
                  "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                  False, "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033061376], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"d"}, "IsModule" -> False, "Module" -> 
                  "hypernetx.utils.extras", "IsClass" -> False, "IsFunction" -> 
                  True, "IsMethod" -> False, "IsCallable" -> True|>]]}|>, <|
            "hypernetx.utils.toys" -> {<|
               "hypernetx.utils.toys.gene_data" -> {}, 
                "classes" -> {"GeneData"}, "functions" -> {}|>, <|
               "hypernetx.utils.toys.harrypotter" -> {}, 
                "classes" -> {
                 "HNXCount", "HarryPotter", "OrderedDict", "defaultdict"}, 
                "functions" -> {
                  ExternalFunction[
                   ExternalObject[
                   Automatic, <|
                    "Command" -> 
                    ExternalEvaluate`RPC["GetReference", 5033059456], "Call" -> 
                    False|>, <|
                    "Arguments" -> {"data", "weights", "aggregateby"}, 
                    "IsModule" -> False, "Module" -> "hypernetx.utils.extras",
                     "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
                    False, "IsCallable" -> True|>]]}|>, <|
               "hypernetx.utils.toys.lesmis" -> {}, 
                "classes" -> {"LesMis", "chain", "islice", "repeat"}, 
                "functions" -> {
                  ExternalFunction[
                   ExternalObject[
                   Automatic, <|
                    "Command" -> 
                    ExternalEvaluate`RPC["GetReference", 5096196832], "Call" -> 
                    False|>, <|
                    "Arguments" -> {"df", "xlabel", "ylabel", "s"}, 
                    "IsModule" -> False, "Module" -> 
                    "hypernetx.utils.toys.lesmis", "IsClass" -> False, 
                    "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                    True|>]], 
                  ExternalFunction[
                   ExternalObject[
                   Automatic, <|
                    "Command" -> 
                    ExternalEvaluate`RPC["GetReference", 5096197152], "Call" -> 
                    False|>, <|
                    "Arguments" -> {}, "IsModule" -> False, "Module" -> 
                    "hypernetx.utils.toys.lesmis", "IsClass" -> False, 
                    "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                    True|>]], 
                  ExternalFunction[
                   ExternalObject[
                   Automatic, <|
                    "Command" -> 
                    ExternalEvaluate`RPC["GetReference", 5033065056], "Call" -> 
                    False|>, <|
                    "Arguments" -> {"df", "by", "on"}, "IsModule" -> False, 
                    "Module" -> "hypernetx.utils.toys.lesmis", "IsClass" -> 
                    False, "IsFunction" -> True, "IsMethod" -> False, 
                    "IsCallable" -> True|>]], 
                  ExternalFunction[
                   ExternalObject[
                   Automatic, <|
                    "Command" -> 
                    ExternalEvaluate`RPC["GetReference", 5096196992], "Call" -> 
                    False|>, <|
                    "Arguments" -> {"row"}, "IsModule" -> False, "Module" -> 
                    "hypernetx.utils.toys.lesmis", "IsClass" -> False, 
                    "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
                    True|>]]}|>, <|
               "hypernetx.utils.toys.transmission_problem" -> {}, 
                "classes" -> {"TransmissionProblem"}, "functions" -> {}|>}, 
             "classes" -> {
              "GeneData", "HarryPotter", "LesMis", "TransmissionProblem"}, 
             "functions" -> {
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5096196832], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"df", "xlabel", "ylabel", "s"}, "IsModule" -> 
                  False, "Module" -> "hypernetx.utils.toys.lesmis", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]], 
               ExternalFunction[
                ExternalObject[
                Automatic, <|
                 "Command" -> 
                  ExternalEvaluate`RPC["GetReference", 5033065056], "Call" -> 
                  False|>, <|
                 "Arguments" -> {"df", "by", "on"}, "IsModule" -> False, 
                  "Module" -> "hypernetx.utils.toys.lesmis", "IsClass" -> 
                  False, "IsFunction" -> True, "IsMethod" -> False, 
                  "IsCallable" -> True|>]]}|>}, 
          "classes" -> {
           "DefaultOrderedDict", "GeneData", "HNXCount", "HarryPotter", 
            "LesMis", "TransmissionProblem"}, "functions" -> {
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5096196832], 
               "Call" -> False|>, <|
              "Arguments" -> {"df", "xlabel", "ylabel", "s"}, "IsModule" -> 
               False, "Module" -> "hypernetx.utils.toys.lesmis", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5033061216], 
               "Call" -> False|>, <|
              "Arguments" -> {
                "num_edges", "num_nodes", "edgeprefix", "nodeprefix", 
                 "edgelabel", "nodelabel"}, "IsModule" -> False, "Module" -> 
               "hypernetx.utils.extras", "IsClass" -> False, "IsFunction" -> 
               True, "IsMethod" -> False, "IsCallable" -> True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5033065056], 
               "Call" -> False|>, <|
              "Arguments" -> {"df", "by", "on"}, "IsModule" -> False, 
               "Module" -> "hypernetx.utils.toys.lesmis", "IsClass" -> False, 
               "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5033061536], 
               "Call" -> False|>, <|
              "Arguments" -> {}, "IsModule" -> False, "Module" -> 
               "hypernetx.utils.decorators", "IsClass" -> False, "IsFunction" -> 
               True, "IsMethod" -> False, "IsCallable" -> True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5033059456], 
               "Call" -> False|>, <|
              "Arguments" -> {"data", "weights", "aggregateby"}, "IsModule" -> 
               False, "Module" -> "hypernetx.utils.extras", "IsClass" -> 
               False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
               True|>]], 
            ExternalFunction[
             ExternalObject[
             Automatic, <|
              "Command" -> ExternalEvaluate`RPC["GetReference", 5033061376], 
               "Call" -> False|>, <|
              "Arguments" -> {"d"}, "IsModule" -> False, "Module" -> 
               "hypernetx.utils.extras", "IsClass" -> False, "IsFunction" -> 
               True, "IsMethod" -> False, "IsCallable" -> True|>]]}|>}, 
       "classes" -> {
        "DefaultOrderedDict", "EntitySet", "GeneData", "HNXCount", 
         "HarryPotter", "HyperNetXError", "HyperNetXException", 
         "HyperNetXNotImplementedError", "Hypergraph", "LesMis", 
         "TransmissionProblem"}, "functions" -> {
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5237375840], 
            "Call" -> False|>, <|
           "Arguments" -> {
             "H", "tau", "gamma", "transmission_function", 
              "initial_infecteds", "initial_recovereds", "rho", "tmin", 
              "tmax"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.contagion", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5237376000], 
            "Call" -> False|>, <|
           "Arguments" -> {
             "H", "tau", "gamma", "transmission_function", 
              "initial_infecteds", "rho", "tmin", "tmax", "return_full_data", 
              "sim_kwargs"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.contagion", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236811360], 
            "Call" -> False|>, <|
           "Arguments" -> {"M", "i", "j"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236811200], 
            "Call" -> False|>, <|
           "Arguments" -> {"M", "i", "j"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236813920], 
            "Call" -> False|>, <|
           "Arguments" -> {"bd", "k"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236814080], 
            "Call" -> False|>, <|
           "Arguments" -> {"h", "k"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236809920], 
            "Call" -> False|>, <|
           "Arguments" -> {"km1basis", "kbasis"}, "IsModule" -> False, 
            "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
            False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5096196832], 
            "Call" -> False|>, <|
           "Arguments" -> {"df", "xlabel", "ylabel", "s"}, "IsModule" -> 
            False, "Module" -> "hypernetx.utils.toys.lesmis", "IsClass" -> 
            False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236813280], 
            "Call" -> False|>, <|
           "Arguments" -> {"image_basis"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5096209632], 
            "Call" -> False|>, <|
           "Arguments" -> {"X"}, "IsModule" -> False, "Module" -> 
            "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236813760], 
            "Call" -> False|>, <|
           "Arguments" -> {"h", "k"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 6082487424], 
            "Call" -> False|>, <|
           "Arguments" -> {"k1", "k2"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.generative_models", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236816000], 
            "Call" -> False|>, <|
           "Arguments" -> {"node", "status", "edge"}, "IsModule" -> False, 
            "Module" -> "hypernetx.algorithms.contagion", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5096222496], 
            "Call" -> False|>, <|
           "Arguments" -> {"H", "aggregated"}, "IsModule" -> False, "Module" -> 
            "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236815840], 
            "Call" -> False|>, <|
           "Arguments" -> {
             "fig", "H", "transition_events", "node_state_color_dict", 
              "edge_state_color_dict", "node_radius", "fps"}, "IsModule" -> 
            False, "Module" -> "hypernetx.algorithms.contagion", "IsClass" -> 
            False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5033061216], 
            "Call" -> False|>, <|
           "Arguments" -> {
             "num_edges", "num_nodes", "edgeprefix", "nodeprefix", 
              "edgelabel", "nodelabel"}, "IsModule" -> False, "Module" -> 
            "hypernetx.utils.extras", "IsClass" -> False, "IsFunction" -> 
            True, "IsMethod" -> False, "IsCallable" -> True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 6082487264], 
            "Call" -> False|>, <|
           "Arguments" -> {"k1", "k2", "g1", "g2", "omega"}, "IsModule" -> 
            False, "Module" -> "hypernetx.algorithms.generative_models", 
            "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> False, 
            "IsCallable" -> True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5096222336], 
            "Call" -> False|>, <|
           "Arguments" -> {"H", "aggregated"}, "IsModule" -> False, "Module" -> 
            "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 6082487104], 
            "Call" -> False|>, <|
           "Arguments" -> {"D"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236816640], 
            "Call" -> False|>, <|
           "Arguments" -> {
             "H", "tau", "gamma", "transmission_function", 
              "initial_infecteds", "initial_recovereds", "rho", "tmin", 
              "tmax", "dt", "return_full_data"}, "IsModule" -> False, 
            "Module" -> "hypernetx.algorithms.contagion", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5237375680], 
            "Call" -> False|>, <|
           "Arguments" -> {
             "H", "tau", "gamma", "transmission_function", 
              "initial_infecteds", "rho", "tmin", "tmax", "dt", 
              "return_full_data"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.contagion", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5096223936], 
            "Call" -> False|>, <|
           "Arguments" -> {"H"}, "IsModule" -> False, "Module" -> 
            "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236808960], 
            "Call" -> False|>, <|
           "Arguments" -> {
             "H", "pos", "with_color", "with_node_counts", "with_edge_counts",
               "layout", "layout_kwargs", "ax", "node_radius", "edges_kwargs",
               "nodes_kwargs", "edge_labels_on_edge", "edge_labels", 
              "edge_labels_kwargs", "node_labels", "node_labels_kwargs", 
              "with_edge_labels", "with_node_labels", "node_label_alpha", 
              "edge_label_alpha", "with_additional_edges", 
              "additional_edges_kwargs", "return_pos"}, "IsModule" -> False, 
            "Module" -> "hypernetx.drawing.rubber_band", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236809600], 
            "Call" -> False|>, <|
           "Arguments" -> {
             "H", "with_node_labels", "with_edge_labels", "with_node_counts", 
              "with_edge_counts", "with_color", "edge_kwargs", "ax"}, 
            "IsModule" -> False, "Module" -> "hypernetx.drawing.two_column", 
            "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> False, 
            "IsCallable" -> True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5096222176], 
            "Call" -> False|>, <|
           "Arguments" -> {"H", "aggregated"}, "IsModule" -> False, "Module" -> 
            "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5515329216], 
            "Call" -> False|>, <|
           "Arguments" -> {"n", "m", "p", "node_labels", "edge_labels"}, 
            "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.generative_models", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5237376640], 
            "Call" -> False|>, <|
           "Arguments" -> {"P"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.laplacians_clustering", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236814240], 
            "Call" -> False|>, <|
           "Arguments" -> {"bd", "k", "boundary"}, "IsModule" -> False, 
            "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
            False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236814400], 
            "Call" -> False|>, <|
           "Arguments" -> {"h", "k", "shortest", "interpreted"}, "IsModule" -> 
            False, "Module" -> "hypernetx.algorithms.homology_mod2", 
            "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> False, 
            "IsCallable" -> True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236816160], 
            "Call" -> False|>, <|
           "Arguments" -> {"node", "status", "edge"}, "IsModule" -> False, 
            "Module" -> "hypernetx.algorithms.contagion", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5096222976], 
            "Call" -> False|>, <|
           "Arguments" -> {"H", "node", "edge"}, "IsModule" -> False, 
            "Module" -> "hypernetx.reports.descriptive_stats", "IsClass" -> 
            False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5096223776], 
            "Call" -> False|>, <|
           "Arguments" -> {"H", "node", "edge"}, "IsModule" -> False, 
            "Module" -> "hypernetx.reports.descriptive_stats", "IsClass" -> 
            False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236814560], 
            "Call" -> False|>, <|
           "Arguments" -> {"Ck", "arr", "labels"}, "IsModule" -> False, 
            "Module" -> "hypernetx.algorithms.homology_mod2", "IsClass" -> 
            False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236809760], 
            "Call" -> False|>, <|
           "Arguments" -> {"h", "k"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 6082488704], 
            "Call" -> False|>, <|
           "Arguments" -> {"HG", "delta", "verbose"}, "IsModule" -> False, 
            "Module" -> "hypernetx.algorithms.hypergraph_modularity", 
            "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> False, 
            "IsCallable" -> True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 6082489184], 
            "Call" -> False|>, <|
           "Arguments" -> {"HG", "A", "wdc", "delta", "verbose"}, "IsModule" -> 
            False, "Module" -> "hypernetx.algorithms.hypergraph_modularity", 
            "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> False, 
            "IsCallable" -> True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5033065056], 
            "Call" -> False|>, <|
           "Arguments" -> {"df", "by", "on"}, "IsModule" -> False, "Module" -> 
            "hypernetx.utils.toys.lesmis", "IsClass" -> False, "IsFunction" -> 
            True, "IsMethod" -> False, "IsCallable" -> True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 6082487744], 
            "Call" -> False|>, <|
           "Arguments" -> {"d", "c"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 4371007264], 
            "Call" -> False|>, <|
           "Arguments" -> {"filepath"}, "IsModule" -> False, "Module" -> 
            "hypernetx.read_write", "IsClass" -> False, "IsFunction" -> True, 
            "IsMethod" -> False, "IsCallable" -> True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236811520], 
            "Call" -> False|>, <|
           "Arguments" -> {"ar1", "ar2"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236812000], 
            "Call" -> False|>, <|
           "Arguments" -> {"mat1", "mat2"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236811680], 
            "Call" -> False|>, <|
           "Arguments" -> {"mat1", "mat2"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 6082487904], 
            "Call" -> False|>, <|
           "Arguments" -> {"d", "c"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236816480], 
            "Call" -> False|>, <|
           "Arguments" -> {"node", "status", "edge"}, "IsModule" -> False, 
            "Module" -> "hypernetx.algorithms.contagion", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236811840], 
            "Call" -> False|>, <|
           "Arguments" -> {"arr", "reverse"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 6082488224], 
            "Call" -> False|>, <|
           "Arguments" -> {"HG", "A", "wdc"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5237378880], 
            "Call" -> False|>, <|
           "Arguments" -> {"H", "weights", "index"}, "IsModule" -> False, 
            "Module" -> "hypernetx.algorithms.laplacians_clustering", 
            "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> False, 
            "IsCallable" -> True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5033061536], 
            "Call" -> False|>, <|
           "Arguments" -> {}, "IsModule" -> False, "Module" -> 
            "hypernetx.utils.decorators", "IsClass" -> False, "IsFunction" -> 
            True, "IsMethod" -> False, "IsCallable" -> True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 6082487584], 
            "Call" -> False|>, <|
           "Arguments" -> {"A"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5237376160], 
            "Call" -> False|>, <|
           "Arguments" -> {"H", "weights", "index", "check_connected"}, 
            "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.laplacians_clustering", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236813120], 
            "Call" -> False|>, <|
           "Arguments" -> {"M"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5033059456], 
            "Call" -> False|>, <|
           "Arguments" -> {"data", "weights", "aggregateby"}, "IsModule" -> 
            False, "Module" -> "hypernetx.utils.extras", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5033061376], 
            "Call" -> False|>, <|
           "Arguments" -> {"d"}, "IsModule" -> False, "Module" -> 
            "hypernetx.utils.extras", "IsClass" -> False, "IsFunction" -> 
            True, "IsMethod" -> False, "IsCallable" -> True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236814880], 
            "Call" -> False|>, <|
           "Arguments" -> {
             "H", "s", "edges", "normalized", "return_singletons"}, 
            "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.s_centrality_measures", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236815040], 
            "Call" -> False|>, <|
           "Arguments" -> {"H", "s", "edges", "return_singletons", "source"}, 
            "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.s_centrality_measures", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5096222656], 
            "Call" -> False|>, <|
           "Arguments" -> {
             "H", "s", "aggregated", "edges", "return_singletons"}, 
            "IsModule" -> False, "Module" -> 
            "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236815520], 
            "Call" -> False|>, <|
           "Arguments" -> {"H", "s", "edges", "source", "return_singletons"}, 
            "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.s_centrality_measures", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5096223456], 
            "Call" -> False|>, <|
           "Arguments" -> {"H"}, "IsModule" -> False, "Module" -> 
            "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236815360], 
            "Call" -> False|>, <|
           "Arguments" -> {
             "H", "s", "edges", "source", "normalized", "return_singletons"}, 
            "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.s_centrality_measures", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236815200], 
            "Call" -> False|>, <|
           "Arguments" -> {"H", "s", "edge"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.s_centrality_measures", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5096223296], 
            "Call" -> False|>, <|
           "Arguments" -> {"H"}, "IsModule" -> False, "Module" -> 
            "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236812960], 
            "Call" -> False|>, <|
           "Arguments" -> {"M"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5515075776], 
            "Call" -> False|>, <|
           "Arguments" -> {"H", "k", "existing_lap", "weights"}, "IsModule" -> 
            False, "Module" -> "hypernetx.algorithms.laplacians_clustering", 
            "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> False, 
            "IsCallable" -> True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 6082488064], 
            "Call" -> False|>, <|
           "Arguments" -> {"d", "c"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236811040], 
            "Call" -> False|>, <|
           "Arguments" -> {"i", "j"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236810880], 
            "Call" -> False|>, <|
           "Arguments" -> {"i", "j"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.homology_mod2", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5236816320], 
            "Call" -> False|>, <|
           "Arguments" -> {"node", "status", "edge", "tau"}, "IsModule" -> 
            False, "Module" -> "hypernetx.algorithms.contagion", "IsClass" -> 
            False, "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 4371007104], 
            "Call" -> False|>, <|
           "Arguments" -> {"obj", "filename"}, "IsModule" -> False, "Module" -> 
            "hypernetx.read_write", "IsClass" -> False, "IsFunction" -> True, 
            "IsMethod" -> False, "IsCallable" -> True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 5096223616], 
            "Call" -> False|>, <|
           "Arguments" -> {"H", "aggregated"}, "IsModule" -> False, "Module" -> 
            "hypernetx.reports.descriptive_stats", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]], 
         ExternalFunction[
          ExternalObject[
          Automatic, <|
           "Command" -> ExternalEvaluate`RPC["GetReference", 6082488544], 
            "Call" -> False|>, <|
           "Arguments" -> {"HG"}, "IsModule" -> False, "Module" -> 
            "hypernetx.algorithms.hypergraph_modularity", "IsClass" -> False, 
            "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> 
            True|>]]}|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[94.5], 
         TypeSystem`PackageScope`UnknownShape[False]]], 3, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration["classes", "functions", "hypernetx"]], 
       TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 3], 
     "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`UnknownShape[False]], 20, 
       DirectedInfinity[1], {}], "Type" -> 
     TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], "Path" -> {
       Key["functions"]}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 
     1, "DataRowCount" -> 70, "DataColumnCount" -> 1, "SortPaths" -> {}, 
     "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 4|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {
     Key["functions"]}, TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "33535b04-d6c6-4470-94e4-114cb5c44f92"]][{
                    Key["functions"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "33535b04-d6c6-4470-94e4-114cb5c44f92"]][{
                    Key["functions"], 2}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 2}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "5236811360"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"M\"", ",", "\"i\"", ",", "\"j\""}], "}"}]}], 
                    ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.algorithms.homology_mod2\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 3}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "5236811200"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"M\"", ",", "\"i\"", ",", "\"j\""}], "}"}]}], 
                    ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.algorithms.homology_mod2\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 4}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "5236813920"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"bd\"", ",", "\"k\""}], "}"}]}], ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.algorithms.homology_mod2\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 5}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "5236814080"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"h\"", ",", "\"k\""}], "}"}]}], ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.algorithms.homology_mod2\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 6}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "5236809920"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"km1basis\"", ",", "\"kbasis\""}], "}"}]}], ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.algorithms.homology_mod2\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 7}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "5096196832"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"df\"", ",", "\"xlabel\"", ",", "\"ylabel\"", 
                    ",", "\"s\""}], "}"}]}], ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.utils.toys.lesmis\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 8}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "5236813280"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", "\"image_basis\"", "}"}]}], ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.algorithms.homology_mod2\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 9}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "5096209632"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", "\"X\"", "}"}]}], ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.reports.descriptive_stats\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 10}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "5236813760"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"h\"", ",", "\"k\""}], "}"}]}], ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.algorithms.homology_mod2\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 11}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "6082487424"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"k1\"", ",", "\"k2\""}], "}"}]}], ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.algorithms.generative_models\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 12}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "5236816000"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"node\"", ",", "\"status\"", ",", "\"edge\""}], 
                    "}"}]}], ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.algorithms.contagion\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 13}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "5096222496"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"H\"", ",", "\"aggregated\""}], "}"}]}], ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.reports.descriptive_stats\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 14}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "5236815840"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"fig\"", ",", "\"H\"", ",", 
                    "\"transition_events\"", ",", "\"node_state_color_dict\"",
                     ",", "\"edge_state_color_dict\"", ",", "\"node_radius\"",
                     ",", "\"fps\""}], "}"}]}], ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.algorithms.contagion\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 15}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "5033061216"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"num_edges\"", ",", "\"num_nodes\"", ",", 
                    "\"edgeprefix\"", ",", "\"nodeprefix\"", ",", 
                    "\"edgelabel\"", ",", "\"nodelabel\""}], "}"}]}], ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.utils.extras\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 16}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "6082487264"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"k1\"", ",", "\"k2\"", ",", "\"g1\"", ",", 
                    "\"g2\"", ",", "\"omega\""}], "}"}]}], ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.algorithms.generative_models\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 17}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "5096222336"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"H\"", ",", "\"aggregated\""}], "}"}]}], ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.reports.descriptive_stats\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 18}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"ExternalFunction", "[", 
                   RowBox[{"ExternalObject", "[", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Command\"", "\[Rule]", 
                    RowBox[{"ExternalEvaluate`RPC", "[", 
                    RowBox[{"\"GetReference\"", ",", "6082487104"}], "]"}]}], 
                    ",", 
                    RowBox[{"\"Call\"", "\[Rule]", "False"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Arguments\"", "\[Rule]", 
                    RowBox[{"{", "\"D\"", "}"}]}], ",", 
                    RowBox[{"\"IsModule\"", "\[Rule]", "False"}], ",", 
                    
                    RowBox[{"\"Module\"", "\[Rule]", 
                    "\"hypernetx.algorithms.hypergraph_modularity\""}], ",", 
                    RowBox[{"\"IsClass\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsFunction\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"IsMethod\"", "\[Rule]", "False"}], ",", 
                    RowBox[{"\"IsCallable\"", "\[Rule]", "True"}]}], 
                    "\[RightAssociation]"}]}], "]"}], "]"}], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 19}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "33535b04-d6c6-4470-94e4-114cb5c44f92"]][{
                    Key["functions"], 20}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
                 Key["functions"], 20}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 70, 1], {1, 70 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "33535b04-d6c6-4470-94e4-114cb5c44f92"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 70, 1], {1, 70 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "33535b04-d6c6-4470-94e4-114cb5c44f92"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[70, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[70, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "33535b04-d6c6-4470-94e4-114cb5c44f92"}, "Rows", 1, {}]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "33535b04-d6c6-4470-94e4-114cb5c44f92"}, "Rows", 10, {}]],
                     MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "33535b04-d6c6-4470-94e4-114cb5c44f92"}, "Rows", 30, {}]],
                     MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "33535b04-d6c6-4470-94e4-114cb5c44f92"}, "Rows", 
                    100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "33535b04-d6c6-4470-94e4-114cb5c44f92"}, "Rows", 
                    100000000, {}]], MenuEvaluator -> Automatic]}], " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 70, 1], {1, 70 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "33535b04-d6c6-4470-94e4-114cb5c44f92"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 70, 1], {1, 70 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "33535b04-d6c6-4470-94e4-114cb5c44f92"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                "33535b04-d6c6-4470-94e4-114cb5c44f92", {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "33535b04-d6c6-4470-94e4-114cb5c44f92"]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "33535b04-d6c6-4470-94e4-114cb5c44f92"]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "33535b04-d6c6-4470-94e4-114cb5c44f92"][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "33535b04-d6c6-4470-94e4-114cb5c44f92"][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "33535b04-d6c6-4470-94e4-114cb5c44f92"][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              "33535b04-d6c6-4470-94e4-114cb5c44f92"][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1337., {285.4513814697266, 291.1833150634766}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1337., {285.4513814697266, 291.1833150634766}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.923407226338677*^9, 3.923407241058793*^9}, 
   3.92340829578631*^9, 3.9234083988406267`*^9, 3.9234086018519487`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"80baf81d-1331-4e60-937f-b242c95db1f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PythonPackageFunctions", "[", "\"\<qnm\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.923407220331461*^9, 3.923407257672694*^9}, {
  3.92340830206528*^9, 3.923408304382625*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"665d8fdb-a77c-49e9-b0a2-e4a8508bf62e"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "qnm" -> {<|
         "qnm._version" -> {}, "classes" -> {}, "functions" -> {}|>, <|
         "qnm.angular" -> {}, "classes" -> {}, 
          "functions" -> {
           "C_and_sep_const_closest", "M_matrix", "M_matrix_elem", "calA", 
            "calB", "calC", "calD", "calE", "calF", "calG", "calH", 
            "give_M_matrix_elem_ufunc", "l_min", "sep_const_closest", 
            "sep_consts", "swsphericalh_A"}|>, <|
         "qnm.contfrac" -> {}, "classes" -> {}, 
          "functions" -> {"lentz", "lentz_gen"}|>, <|
         "qnm.nearby" -> {}, "classes" -> {"NearbyRootFinder"}, 
          "functions" -> {"C_and_sep_const_closest", "sep_const_closest"}|>, <|
         "qnm.radial" -> {}, "classes" -> {}, 
          "functions" -> {
           "D_coeffs", "leaver_cf_inv_lentz", "leaver_cf_trunc_inversion", 
            "lentz", "sing_pt_char_exps"}|>, <|
         "qnm.schwarzschild" -> {<|
            "qnm.schwarzschild.approx" -> {}, "classes" -> {}, 
             "functions" -> {
              "Schw_QNM_estimate", "dolan_ottewill_expansion", 
               "large_overtone_expansion"}|>, <|
            "qnm.schwarzschild.overtonesequence" -> {}, 
             "classes" -> {"NearbyRootFinder", "SchwOvertoneSeq"}, 
             "functions" -> {
              "dolan_ottewill_expansion", "l_min", "swsphericalh_A"}|>, <|
            "qnm.schwarzschild.tabulated" -> {}, 
             "classes" -> {"QNMDict", "SchwOvertoneSeq"}, 
             "functions" -> {"build_Schw_dict", "l_min"}|>}, "classes" -> {}, 
          "functions" -> {}|>, <|
         "qnm.spinsequence" -> {}, 
          "classes" -> {"KerrSpinSeq", "NearbyRootFinder", "QNMDict"}, 
          "functions" -> {"Schw_QNM_estimate", "l_min", "swsphericalh_A"}|>}, 
       "classes" -> {}, "functions" -> {}|>, "AllowEmbedding" -> True, 
     "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[94.5], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`KeyValueShape[
              TypeSystem`PackageScope`UnknownShape[True], 
              TypeSystem`PackageScope`UnknownShape[False]]], 2, 
            DirectedInfinity[1], {All, All}]], 3, 
          DirectedInfinity[1], {All}]]], 3, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration["classes", "functions", "qnm"]], 
       TypeSystem`Vector[
        TypeSystem`Assoc[TypeSystem`AnyType, 
         TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 3], 
        TypeSystem`AnyLength], 3], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[94.5], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`KeyValueShape[
              TypeSystem`PackageScope`UnknownShape[True], 
              TypeSystem`PackageScope`UnknownShape[False]]], 2, 
            DirectedInfinity[1], {All, All}]], 3, 
          DirectedInfinity[1], {All}]]], 3, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration["classes", "functions", "qnm"]], 
       TypeSystem`Vector[
        TypeSystem`Assoc[TypeSystem`AnyType, 
         TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 3], 
        TypeSystem`AnyLength], 3], "Path" -> {}, "DisplayedRowCount" -> 3, 
     "DisplayedColumnCount" -> 1, "DataRowCount" -> 3, "DataColumnCount" -> 1,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["qnm", 
                  Style[
                  "qnm", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["qnm"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["qnm"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["qnm._version", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["qnm"], 1, 
                 Key["qnm._version"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["classes", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["qnm"], 1, 
                 Key["classes"]}, "Item", False], "Mouse"], 
              ImageSize -> {{78.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["3 total \:203a ", ""], 
                  Style[
                   Superscript["3 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["qnm"], 1}, 2]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["qnm"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, All}]], MenuEvaluator -> Automatic], 
                 Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
             Background -> GrayLevel[0.98]], SpanFromLeft}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["qnm.angular", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["qnm"], 2, 
                 Key["qnm.angular"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["classes", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["qnm"], 2, 
                 Key["classes"]}, "Item", False], "Mouse"], 
              ImageSize -> {{78.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["3 total \:203a ", ""], 
                  Style[
                   Superscript["3 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["qnm"], 2}, 2]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["qnm"], 2}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, All}]], MenuEvaluator -> Automatic], 
                 Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
             Background -> GrayLevel[0.98]], SpanFromLeft}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["qnm.contfrac", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["qnm"], 3, 
                 Key["qnm.contfrac"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["classes", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["qnm"], 3, 
                 Key["classes"]}, "Item", False], "Mouse"], 
              ImageSize -> {{78.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["3 total \:203a ", ""], 
                  Style[
                   Superscript["3 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["qnm"], 3}, 2]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["qnm"], 3}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, All}]], MenuEvaluator -> Automatic], 
                 Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
             Background -> GrayLevel[0.98]], SpanFromLeft}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["7 total \:203a ", ""], 
                  Style[
                   Superscript["7 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["qnm"]}, 2]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["qnm"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All}]], MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
             Background -> GrayLevel[0.98]], SpanFromLeft}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["classes", 
                  Style[
                  "classes", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["classes"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["classes"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Spacer[10], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Spacer[10], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["classes"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["classes"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], 8}], SpanFromLeft}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["functions", 
                  Style[
                  "functions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["functions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["functions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Spacer[10], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Spacer[10], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["functions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["functions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], 8}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
    "33535b04-d6c6-4470-94e4-114cb5c44f92"][{
      Key["functions"]}, "Item", False]}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{262.58359375, {142.13720703125, 147.869140625}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{262.58359375, {142.13720703125, 147.869140625}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.92340725897153*^9, 3.9234083103535347`*^9, {3.9234083858770514`*^9, 
   3.923408400190942*^9}},
 CellLabel->"Out[3]=",ExpressionUUID->"2598f9a7-6898-4fe9-9f7d-78781896ea9e"]
}, Open  ]]
},
WindowSize->{1440, 847},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (April 29, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"2c040064-b933-4280-9962-953ddf001c5c"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[554, 20, 173, 2, 29, "Input",ExpressionUUID->"147229e2-15d3-431f-9a0d-9bc9e08cf09e"],
Cell[730, 24, 3425, 80, 204, "Input",ExpressionUUID->"05f91d20-68b2-4f05-9138-8eab74acde40"],
Cell[CellGroupData[{
Cell[4180, 108, 284, 4, 29, "Input",ExpressionUUID->"3f20b253-9edb-424a-b3c7-c152f8202e11"],
Cell[4467, 114, 214347, 4209, 593, "Output",ExpressionUUID->"80baf81d-1331-4e60-937f-b242c95db1f3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[218851, 4328, 277, 4, 29, "Input",ExpressionUUID->"665d8fdb-a77c-49e9-b0a2-e4a8508bf62e"],
Cell[219131, 4334, 56115, 1009, 307, "Output",ExpressionUUID->"2598f9a7-6898-4fe9-9f7d-78781896ea9e"]
}, Open  ]]
}
]
*)

